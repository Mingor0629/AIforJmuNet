#coding=utf-8
"""
[0,1,2]
[3,4,5]
[6,7,8]
"""

#胜利的走法
win_chess = [[0,4,8],[2,4,6],[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8]]
#最佳下棋顺序
best_way = [4,0,2,6,8,1,3,5,7]
#棋盘
chess = [0,0,0,0,0,0,0,0,0]

def is_win(now_chess,who):
    """
    判断游戏方（who）是否赢局
    """
    temp = now_chess[:]
    for w_c in win_chess:
        if temp[w_c[0]] == who and temp[w_c[1]] == who and temp[w_c[2]] == who :
            return who
    return 0

def count_zero(now_chess):
    """
    统计剩余格子
    返回个数
    """
    temp = now_chess[:]
    count = 0
    for te in temp:
        if te == 0:
            count = count + 1
    return count

def evaluation(now_chess):
    """
    估价函数（以X为对象）
    可以赢的行数 +1
    可以赢的行数上有自己的棋子 +2
    可导致自己赢 +2
    可导致对手赢 -2
    """
    temp = now_chess[:]
    count = 0
    for w_c in win_chess:
        if temp[w_c[0]] >= 0 and temp[w_c[1]] >= 0 and temp[w_c[2]] >= 0 :
            if temp[w_c[0]] == 1 or temp[w_c[1]] == 1 or temp[w_c[2]] == 1 :
                count += 1
            count += 1
    if is_win(temp,1) == 1:
        count = count + 2
    if is_win(temp,-1) == -1:
        count = count - 2
    return count

def all_go(now_chess,who):
    """
    遍历所有走法
    """
    temp = now_chess[:]
    tempp = []
    for i in best_way:
        if temp[i] == 0:
            temppp = temp[:]
            temppp[i]=who
            tempp.append([temppp,i])
    return tempp

def get_next_x(now_chess,who):
    """
    x获取下一个位置
    """
    temp = now_chess[:]
    best_list = None
    best_one = -1
    if count_zero(temp) <= 3 :
        for te in all_go(temp,who):
            if best_one == -1:
                best_list = te[0]
                best_one = te[1]
            else :
                if evaluation(te[0]) > evaluation(best_list):
                    best_list = te[0]
                    best_one = te[1]
        return best_one
    for te in all_go(temp,who):
        for tee in all_go(te[0],who*-1):
            for teee in all_go(tee[0],who):
                if best_list is None:
                    best_list = teee[0]
                    best_one = te[1]
                else:
                    if evaluation(teee[0]) > evaluation(best_list) :
                        best_list = teee[0]
                        best_one = te[1]
    return best_one

def get_next_o(now_chess,who):
    """
    o获取下一个位置
    """
    temp = now_chess[:]
    best_list = None
    best_one = -1
    if count_zero(temp) <= 2 :
        for te in all_go(temp,who):
            if best_one == -1:
                best_list = te[0]
                best_one = te[1]
            else :
                if evaluation(te[0]) < evaluation(best_list):
                    best_list = te[0]
                    best_one = te[1]
        return best_one
    for te in all_go(temp,who):
        for tee in all_go(te[0],who*-1):
            if best_list is None:
                best_list = tee[0]
                best_one = te[1]
            else:
                if evaluation(tee[0]) < evaluation(best_list) :
                    best_list = tee[0]
                    best_one = te[1]
    return best_one

def is_danger(now_chess,who=0):
    """
    判断自己是否处于危险状态（即 对手可能已经差一子赢局）
    """
    temp = now_chess[:]
    for te in all_go(temp,who*-1):
        if is_win(te[0],who*-1) == who*-1:
            return te[1]
    return -1

if __name__ == "__main__":
    """
    测试用
    """
    chess = [0,0,0,\
            0,1,0,\
            0,0,0]
    #print(get_next_old(chess,-1,1))
    #print(all_go(chess,1))
    print(get_next_o(chess,-1))
    # 棋盘
class Board(object):
    def __init__(self):
        #self._board = '-'*9 # 坑！！
        self._board = ['-' for _ in range(9)]
        self._history = [] # 棋谱
        
    # 按指定动作，放入棋子
    def _move(self, action, take):
        if self._board[action] == '-':
            self._board[action] = take
            
            self._history.append((action, take)) # 加入棋谱
            
    # 撤销动作，拿走棋子
    def _unmove(self, action):
        self._board[action] = '-'
        
        self._history.pop()
            
    # 棋盘快照
    def get_board_snapshot(self):
        return self._board[:]
        
    # 取棋盘上的合法走法
    def get_legal_actions(self):
        actions = []
        for i in range(9):
            if self._board[i] == '-':
                actions.append(i)
        return actions
        
    # 判断走法是否合法
    def is_legal_action(self, action):
        return self._board[action] == '-'
        
    # 终止检测
    def teminate(self):
        board = self._board
        lines = [board[0:3], board[3:6], board[6:9], board[0::3], board[1::3], board[2::3], board[0::4], board[2:7:2]]
        
        if ['X']*3 in lines or ['O']*3 in lines or '-' not in board:
            return True 
        else:
            return False
            
    # 胜负检查
    def get_winner(self):
        board = self._board
        lines = [board[0:3], board[3:6], board[6:9], board[0::3], board[1::3], board[2::3], board[0::4], board[2:7:2]]
        
        if ['X']*3 in lines:
            return 0 
        elif ['O']*3 in lines:
            return 1 
        else:
            return 2
            
    # 打印棋盘
    def print_b(self):
        board = self._board
        for i in range(len(board)):
            print(board[i], end='')
            if (i+1)%3 == 0:
                print()
    
    # 打印棋谱
    def print_history(self):
        print(self._history)


# 玩家
class Player(object):
    '''
    玩家只做两件事：思考、落子
        1. 思考 --> 得到走法
        2. 落子 --> 执行走法，改变棋盘
    '''
    def __init__(self, take='X'): # 默认执的棋子为 take = 'X'
        self.take=take
    
    def think(self, board):
        pass
        
    def move(self, board, action):
        board._move(action, self.take)


# 人类玩家
class HumanPlayer(Player):
    def __init__(self, take):
        super().__init__(take)
    
    def think(self, board):
        while True:
            action = input('Please input a num in 0-8:')
            if len(action)==1 and action in '012345678' and board.is_legal_action(int(action)):
                return int(action)


# 电脑玩家
class AIPlayer(Player):
    def __init__(self, take):
        super().__init__(take)
    
    def think(self, board):
        print('机器正在思考 ...')
        take = ['X','O'][self.take=='X']
        player = AIPlayer(take)     # 假想敌！！！
        _, action = self.minimax(board, player)
        #print('OK')
        return action
        
    # 极大极小法搜索，α-β剪枝
    def minimax(self, board, player, depth=0) :
        '''参考：https://stackoverflow.com/questions/44089757/minimax-algorithm-for-tic-tac-toe-python'''
        if self.take == "O": 
            bestVal = -10
        else:
            bestVal = 10
            
        if board.teminate() :
            if board.get_winner() == 0 :
                return -10 + depth, None
            elif board.get_winner() == 1 :
                return 10 - depth, None
            elif board.get_winner() == 2 :
                return 0, None

        for action in board.get_legal_actions() : # 遍历合法走法
            board._move(action, self.take)
            val, _ = player.minimax(board, self, depth+1) # 切换到 假想敌！！！
            board._unmove(action) # 撤销走法，回溯
            
            if self.take == "O" :
                if val > bestVal:
                    bestVal, bestAction = val, action
            else :
                if val < bestVal:
                    bestVal, bestAction = val, action
        
        return bestVal, bestAction



# 游戏
class Game(object):
    def __init__(self):
        self.board = Board()
        self.current_player = None
        
    # 生成玩家
    def mk_player(self, p, take='X'): # p in [0,1]
        if p==0:
            return HumanPlayer(take)
        else:
            return AIPlayer(take)
            
    # 切换玩家
    def switch_player(self, player1, player2):
        if self.current_player is None:
            return player1
        else:
            return [player1, player2][self.current_player == player1]
            
    # 打印赢家
    def print_winner(self, winner): # winner in [0,1,2]
        print(['玩家1赢了','玩家2赢了','平局'][winner])

    # 运行游戏
    def run(self):
        ps = input("选择模式：1.人机对抗  2.玩家对抗")
        answer=input()

        if (answer=='1'):
           ts1 = input("机器先手，玩家201621123032王彩云后手")
           p1=1
           p2=0
           player1, player2 = self.mk_player(p1, 'X'), self.mk_player(p2, 'O') # 先手执X，后手执O

        if (answer=='2'):
           
           p1=0
           p2=0
           player1, player2 = self.mk_player(p1, 'X'), self.mk_player(p2, 'O') # 先手执X，后手执O
       # p1, p2 = [int(p) for p in ps.split(' ')]
        #player1, player2 = self.mk_player(p1, 'X'), self.mk_player(p2, 'O') # 先手执X，后手执O

        
        print('\n游戏开始!\n')
        self.board.print_b() # 显示棋盘
        while True:
            self.current_player = self.switch_player(player1, player2) # 切换当前玩家
            
            action = self.current_player.think(self.board) # 当前玩家对棋盘进行思考后，得到招法
            
            self.current_player.move(self.board, action)   # 当前玩家执行招法，改变棋盘
            
            self.board.print_b() # 显示当前棋盘
            
            if self.board.teminate(): # 根据当前棋盘，判断棋局是否终止
                winner = self.board.get_winner() # 得到赢家 0,1,2
                break
        
        self.print_winner(winner)
        print('游戏结束!')
        
        self.board.print_history()
    
    
if __name__ == '__main__':
    Game().run()
